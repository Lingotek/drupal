<?php
/**
 * @file
 * Installation for Lingotek Community Translation Module.
 */

/**
 * Implements hook_install().
 */
function lingotek_install() {
  db_update('system')->fields(array('weight' => 3))->condition('name', 'lingotek')->execute();
  variable_set('lingotek_advanced_parsing', TRUE);
  lingotek_install_default_advanced_xml();
}

/**
 * Implements hook_uninstall().
 */
function lingotek_uninstall() {
  $delete_variables = array(
    'lingotek_advanced_parsing',
    'lingotek_create_documents_by_default',
    'lingotek_oauth_consumer_id',
    'lingotek_oauth_consumer_secret',
  );

  foreach ($delete_variables as $variable) {
    variable_del($variable);
  }
}

/*
 * Install the database schema for the Lingotek module
 */
function lingotek_schema() {
  $schema['lingotek'] = array
  (
    'description' => 'Table for storing node related data.',
    'fields' => array
    (
      'nid' => array
      (
        'description' => 'The primary identifier for a node',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'lingokey' => array
      (
        'description' => 'Key in key/value pairs',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'lingovalue' => array
      (
        'description' => 'Value of the specified key',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array
    (
      'nid',
      'lingokey',
    ),
  );
  $schema['lingotek_mt_queue'] = array
  (
    'description' => 'Table for storing a Machine Translation queue.',
    'fields' => array
    (
      'uid' => array
      (
        'description' => 'The primary identifier for a user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array
      (
        'description' => 'The primary identifier for a node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array
      (
        'description' => 'Language to machine translate',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'engine' => array
      (
        'description' => 'Engine used to machine translate',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
  );
  return $schema;
}

/*
 * Update
 * 1. Create the mt-queue
 * 2. delete the reference variable that was stored in lingotek_languages
 */
function lingotek_update_7200(&$sandbox) {
	drupal_load('module', 'lingotek');

  if (!isset($sandbox['progress'])){
		$result = db_select('lingotek', 'n')->distinct(True)->fields('n', array(db_escape_field('nid')))->execute();
		$nodes = array();
		foreach ($result as $row) {
			array_push($nodes, $row->nid);
		}

    $sandbox['progress'] = 0;
    $sandbox['max'] = count($nodes);
    $sandbox['nodes'] = $nodes;
  }
	$node = node_load($sandbox['nodes'][$sandbox['progress']]);
	if ($node !== FALSE) {
	  if (!class_exists('LingotekApi')) {
	    // The LingotekApi class might not have been introduced when this user last updated the Lingotek module.
      registry_rebuild();
      require_once(drupal_get_path('module', 'lingotek') . '/lib/Drupal/lingotek/LingotekApi.php');
	  }
		LingotekApi::instance()->updateContentDocument($node);
	}

	$sandbox['progress']++;
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished'] == 1) {
  	lingotek_analyze_project();
  }
}

/**
 * Save per-node Lingotek project associations for all existing content.
 */
function lingotek_update_7201(&$sandbox) {
  $lingotek_nodes = array();
  $default_lingotek_project = variable_get('lingotek_project', 0);

  if ($default_lingotek_project) {
    if (!isset($sandbox['progress'])) {
      $result = db_select('lingotek', 'l')
        ->distinct(TRUE)
        ->fields('l', array('nid'))
        ->execute();

      foreach ($result as $row) {
        $lingotek_nodes[] = $row->nid;
      }

      $sandbox['progress'] = 0;
      $sandbox['max'] = count($lingotek_nodes);
      $sandbox['nodes'] = $lingotek_nodes;
    }

    $process_node = node_load(array_shift($sandbox['nodes']));
    if ($process_node->nid && !lingotek_lingonode($process_node->nid, 'project_id')) {
      lingotek_lingonode($process_node->nid, 'project_id', $default_lingotek_project);
    }
    $sandbox['progress'] = (int) (count($sandbox['nodes']) / $sandbox['max']);
  }

  $sandbox['#finished'] = empty($sandbox['nodes']);
}

/**
 * Ensure the Administrator role is granted newly-introduced permissions.
 */
function lingotek_update_7202(&$sandbox) {
  if ($rid = variable_get('user_admin_role', 0)) {
    $new_permisions = array(
      'url_alias_translation',
      'access lingotek utilities',
      'access per-item lingotek project selection',
      'access per-item lingotek vault selection'
    );

    user_role_grant_permissions($rid, $new_permisions);

    return t('Granted new Lingotek permissions to the administrative security role.');
  }
}

/**
 * Install default FPRM configuration data to support advanced content parsing.
 */
function lingotek_update_7203(&$sandbox) {
  if (!variable_get('lingotek_advanced_xml_config1', FALSE) && !variable_get('lingotek_advanced_xml_config2', FALSE)) {
    lingotek_install_default_advanced_xml();
  }
  else {
    return t('No action was taken, since your system already has data in the Primary and/or Secondary advanced parsing configuration fields.
      If you wish to review the default configuration files and compare them to your current settings, the files are in the fprm subfolder of the lingotek module.');
  }
}

/**
 * Ensure LingotekApi class is in autoload registry.
 */
function lingotek_update_7204(&$sandbox) {
  cache_clear_all();
}

/**
 * Ensure that the Lingotek module has a weight higher than entity_translation.
 */
function lingotek_update_7205(&$sandbox) {
  db_update('system')
    ->fields(array('weight' => 12))
    ->condition('name', 'lingotek')
    ->execute();
}

/**
 * Change the value for LINGOTEK_ENABLED to a string to avoid collision.
 */
function lingotek_update_7206() {
  $updated = array();
  foreach (array_keys(node_type_get_names()) as $type) {
    $name = 'language_content_type_' . $type;
    if (variable_get($name) == 5) {
      $updated[] = $type;
      variable_set($name, LINGOTEK_ENABLED);
    }
  }
  
  if (count($updated)) {
    $t_args = array(
      '@updated' => implode(', ', $updated),
    );
    return t("Updated @count content type(s) to use 'lingotek' instead of '5' for the identifier: @updated", $t_args);
  }
}
