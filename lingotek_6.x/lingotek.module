<?php
// $Id:lingotek.module,LingoTek$
/**
 * @file
 * Lingotek Community Translation Hooks, Added Fields on Node Creation
 */

require_once("lingotek.session.inc");
require_once("lingotek.api.inc");
require_once("lingotek.sync.inc");

/*
 * menu hook
 */
function lingotek_menu() {
  $items = array();
  $items['node/%node/lingotek'] = array
  (
    'title' => 'Lingotek',
    'page callback' => 'lingotek_summary',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('tab'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'lingotek.pages.inc',
  );

  $items['admin/settings/lingotek'] = array
  (
    'title' => 'Lingotek',
    'description' => 'Collaborative Translation Settings',
    'file' => 'lingotek.admin.inc',
    'page callback' => 'lingotek_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer'),
  );

  $items['lingotek/mt'] = array
  (
    'page callback' => 'lingotek_mt_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('tab'),
    'file' => 'lingotek.pages.inc',
  );

  $items['lingotek/mt_cancel'] = array
  (
    'page callback' => 'lingotek_mt_cancel',
    'type' => MENU_CALLBACK,
    'access arguments' => array('tab'),
    'file' => 'lingotek.pages.inc',
  );

  $items['lingotek/download'] = array
  (
    'page callback' => 'lingotek_download_ajax',
    'type' => MENU_CALLBACK,
    'access arguments' => array('sync'),
    'file' => 'lingotek.pages.inc',
  );

  return $items;
}

/*
 * permissions hook
 */
function lingotek_perm() {
  return array('tab', 'administer', 'translation_phase', 'review_phase', 'sync', 'machine_translation', 'phase_template');
}

/*
 * form_alter hook
 */
function lingotek_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    default:
      if (isset($form['#id']) && strpos($form['#id'], 'node-form') !== FALSE && isset($form['#node']->type)) {
        $nid = $form['#parameters'][2]->nid;
        //Only give options if the node is new
        if (!isset($nid)) {
          $form['lingotek'] = array
          (
            '#title' => t('Lingotek Settings'),
            '#type' => 'fieldset', '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#description' => t("These settings can only be set once, when creating the page.  If a setting is disabled on creation, then the administrator has chosen the setting."),
          );

          if (user_access('phase_template')) {
            $form['lingotek']['phaseTemplate'] = array
            (
              '#type' => 'select',
              '#title' => t('Phase Template'),
              '#default_value' => variable_get('lingotek_phase_template', ''),
              '#options' => lingotek_get_phase_templates(),
            );
          }

          $available_engines = lingotek_get_machine_translation_engines();
          $enabled_engines = variable_get('lingotek_available_mt_options', array_keys($available_engines));
          $engines = array();
          foreach ($enabled_engines as $engine) {
            $engines[$engine] = $available_engines[$engine];
          }

          if (user_access('machine_translation')) {
            $form['lingotek']['publishWithMt'] = array
            (
              '#type' => 'select',
              '#title' => t('Publish Targets Immediately with the following Machine Translation Engine'),
              '#default_value' => variable_get('lingotek_publish_with_mt', FALSE),
              '#options' => $engines,
            );
          }
        }
      }
  }
}

/*
 * help hook
 *
 * link to Help Documentation
 */
function lingotek_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lingotek':
      return t('Please see our DevZone:') . ' ' . l(t('Drupal Integration'), 'http://lingotek.com/support/devzone/drupal-integration');
  }
}

/*
 * nodeapi hook
 */
function lingotek_nodeapi($node, $op, $teaser, $page) {
  if ($node->language == "") {
    $node->language = variable_get('lingotek_neutral_language', 'en');
  }
  switch ($op) {
    case 'view':
        $view_mode = '';
        if ($page) {
          $view_mode = 'full';
        }
        lingotek_node_view($node, $view_mode);
      break;
    case 'update':
    	lingotek_node_update($node);
    	break;
    case 'delete':
      lingotek_node_delete($node);
      break;
    case 'insert':
        lingotek_node_insert($node);
      break;
  }
}

/*
 * nodeapi update
 */
function lingotek_node_update($node) {
	$doc_id = lingotek_lingonode($node->nid, 'document_id');
	if($doc_id == FALSE) {
		return;
	}

	global $_lingotek_client;

  $file_name = tempnam("temp", "Doc");
  $file_handle = fopen($file_name, "w");

	$body = $node->body;

  fwrite($file_handle, "<?xml version=\"1.0\"?><contents><title><![CDATA[" . $node->title . "]]></title><body><![CDATA[" . $body . "]]></body></contents>");

	$data = array('documentId' => $doc_id);

  $output = $_lingotek_client->upload
  (
    'updateDocument',
    $data,
    $file_name
  );

  fclose($file_handle);

  if ($output->results != "success") {
    error_log("LINGOTEK: Error uploading/updating document - " . __FILE__ . ":" . __LINE__);
    return -1;
  }
}


/*
 * nodeapi hook view operation (node_view hook, Drupal 7)
 */
function lingotek_node_view($node, $view_mode) {
  global $_lingotek_client;

  if ($node->tnid && $node->tnid != $node->nid && $view_mode == 'full') {
    $doc_id = lingotek_lingonode($node->tnid, 'document_id');
    $locales = variable_get('lingotek_languages', array());

    $output = $_lingotek_client->request('listTranslationTargets', array('documentId' => $doc_id));
    if ($output->results == "success") {
      $this_target;
      $phase_id;
      foreach ($output->translationTargets as $target) {
        if ($target->language == $locales[$node->language]) {
          $this_target = $target;
          break;
        }
      }
      $which_phase = 0;
      //Must be returned in order:
      foreach ($this_target->phases as $phase) {
        if ($phase->percentComplete < 100) {
          $phase_id = $phase->id;
          break;
        }
        $which_phase++;
      }

      //Should we download at this point automatically at 100%?:
      //TODO: This is delayed until a second refresh. Once to download, once to display changes...
      if ($which_phase == count($this_target->phases)) {
        if (!lingotek_lingonode($node->nid, "downloaded") ) {
          $source_node = node_load(array('nid' => $node->tnid));
          lingotek_download_document($source_node, $node, TRUE);
          lingotek_lingonode($node->nid, "downloaded", TRUE);
        }
      }
      else {
        if ( (user_access('translation_phase') && $which_phase == 0) || (user_access('review_phase') && $which_phase != 0) ) {
          //We only want to give this message until they reach 100%:
          $message = '<img src="' . base_path() . drupal_get_path('module', 'lingotek') . '/style/warning.png" />&nbsp;';
          $message .= t("The translation of this page is still being worked on.") . " ";
          $message .= lingotek_workbench_phase_link($doc_id, $phase_id, t("Help make it better."));
          drupal_set_message($message);
        }
      }
    }
    else {
      error_log("LINGOTEK API: " . __FILE__ . ":(" . __LINE__ . ") listTranslationTargets FAILED - documentId: " . $doc_id);
      error_log("LINGOTEK API: " . __FILE__ . ":(" . __LINE__ . ") listTranslationTargets message: " . $output->message);
    }
  }
}

/*
 * nodeapi hook delete operation (node_delete hook, Drupal 7)
 */
function lingotek_node_delete($node) {
  global $_lingotek_client;

  //Handle cleanup of target languages
  //Node is the source language, so no need to remove a target language.
  $tnid = lingotek_lingonode($node->nid, 'tnid');
  if ($tnid) {
    $doc_id = lingotek_lingonode($tnid, 'document_id');
    $locales = variable_get('lingotek_languages', array());

    $output = $_lingotek_client->request('getDocument', array('documentId' => $doc_id));
    if ($output->results == "success") {
      foreach ($output->translationTargets as $target) {
        if ($target->language == $locales[$node->language]) {
          $_lingotek_client->request('removeTranslationTarget', array('translationTargetId' => $target->id));
        }
      }
    }
    else {
      error_log("LINGOTEK API: " . __FILE__ . ":(" . __LINE__ . ") getDocument FAILED - documentId: " . $doc_id);
      error_log("LINGOTEK API: " . __FILE__ . ":(" . __LINE__ . ") getDocument message: " . $output->message);
    }

  }
}

/*
 * nodeapi hook insert operation (node_insert hook, Drupal 7)
 *
 * Handle saving the phaseTemplate from the form on a new node's creation.
 */
function lingotek_node_insert($node) {
  if (isset($node->phaseTemplate)) {
    lingotek_lingonode($node->nid, 'phaseTemplate', $node->phaseTemplate);
  }
  if (isset($node->publishWithMt)) {
    lingotek_lingonode($node->nid, 'publishWithMt', $node->publishWithMt);
  }
}

/*
 * menu_link_alter hook
 *
 * Menu Overwriting functionality (Requires the Menu Translation in i18n to be
 * enabled and it's setting enabled within this module)
 *
 * Determines if lingotek_translated_menu_link_alter will be called on a link.
 */
function lingotek_menu_link_alter(&$item, $menu) {
	error_log("link alter?");
  if ($item['external'] == "0" && $item["access_callback"] == "node_access") {
  	error_log("yes");
    $item['options']['alter'] = TRUE;
  }
}

/*
 * translated_menu_link_alter hook
 *
 * Menu Overwriting functionality (Requires the Menu Translation in i18n to be
 * enabled and it's setting enabled within this module)
 *
 * Alters the link so that Menus correctly point to target languages when the
 * user is it's language instead of pointing to the source language's node
 */
function lingotek_translated_menu_link_alter(&$item, $menu) {
  global $language;

  if ($item["menu_name"] != "navigation" && variable_get('lingotek_menu_overwrite', FALSE)) {

    $nid = str_replace(str_replace("%", "", $item['router_path']), "", $item['link_path']);
    $node = lingotek_get_node($language->prefix, $nid);
    if ($node && $node->title != "") {
      $item['href'] = str_replace("%", $node->nid, $item['router_path']);
      $item['link_title'] = $node->title;
    }
    $item["access"] = TRUE;
  }
}
