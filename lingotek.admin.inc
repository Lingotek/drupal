<?php
/**
 * @file
 * Administrative Settings for the module.
 */
include_once('lingotek.session.inc');

preg_match('.Revision: (\d+) .', '$Revision: 25159 $', $revision);
$GLOBALS['_version'] = $revision[1];

/**
 * Admistration Form for configuring the Lingotek Module.
 *
 * @return array
 *   A FAPI form array.
 */
function lingotek_administrative_settings_form() {
  global $_lingotek_client;

  $login = variable_get('lingotek_login_id', '');
  $key = variable_get('lingotek_login_key', '');
  $password = variable_get('lingotek_password', '');
  $community = variable_get('lingotek_community', '');

  $wizard = "full";

  if ($_lingotek_client->canLogIn()) {
    if ($community == '') {
      $communities = lingotek_get_communities();
      $num = count($communities);
      if ($num == 0) { //User doesn't have any communities.  This should rarely happen.
        $wizard = "signup";
        drupal_set_message(t("Your user isn't part of any community.  Please correct this with Lingotek."), 'error');
      }
      elseif ($num == 1) { //The user is done authenticating because the community can be selected automatically since there is only one.
        $wizard = "full";
        reset($communities);
        variable_set('lingotek_community', key($communities));
        variable_set('lingotek_login_key', lingotek_get_cms_key());
      }
      else { //User needs to decide what community because there is more than one
        $wizard = "community";
      }
    }
    else {
      variable_set('lingotek_login_key', lingotek_get_cms_key());
    }

  }
  else {
    $wizard = "signup";
    if ($password != '' && $login != '') {
      drupal_set_message(t("Login incorrect."), 'error');
      variable_del('lingotek_password');
    }
  }

  switch ($wizard) {
    case "signup": //First signin
      $form = lingotek_signup_form();
      break;
    case "community": //Get Community, this step could be skipped if only a member of a single community.
      $form = lingotek_community_form();
      break;
    case "full":
    default:
      $form = lingotek_admin_form();
  }
  return system_settings_form($form);
}

function lingotek_community_form() {
  global $_version;

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Community Setting'),
    '#description' => t('Lingotek Module Version 7.12.@revision', array('@revision' => $_version)),
  );
  $form['auth']['lingotek_community'] = array(
    '#type' => 'select',
    '#title' => t('Community'),
    '#description' => t('Use this community to sign and store translations in.'),
    '#options' => lingotek_get_communities(),
    '#default_value' => variable_get('lingotek_community', ''),
  );

  return $form;
}

function lingotek_signup_form() {
  global $_version;

  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication Settings'),
    '#description' => t(
      'Lingotek Module Version 7.12.@revision<br />Please login using your existing Lingotek ID, or click !link if you need to create a new account.',
      array(
        '@revision' => $_version,
        '!link' => l(t("here"), variable_get('lingotek_url', 'http://myaccount.lingotek.com') . "/lingopoint/portal/communitySignup.action")
      )
    ),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'administrative_settings',
  );

  $form['auth']['lingotek_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Login ID'),
    '#description' => t('Lingotek User ID'),
    '#default_value' => variable_get('lingotek_login_id', ''),
  );

  $form['auth']['lingotek_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Lingotek Password'),
    '#default_value' => '',
  );

  //Advanced settings
    $form['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced Settings'),
      '#description' => t('These settings will only be changed in rare cases.  If your user is not a Community Admin on the Lingotek platform, then you will need to authenticate here.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'administrative_settings',
    );
    $form['advanced']['lingotek_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Lingotek URL'),
      '#description' => t('URL pointing to the Lingotek instance to be used.'),
      '#default_value' => variable_get('lingotek_url', 'http://myaccount.lingotek.com'),
    );
    $form['advanced']['lingotek_login_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Login Key'),
      '#description' => t('Key to use authenticating.  The key must be generated by the Lingotek system and it specific to a community.'),
      '#default_value' => variable_get('lingotek_login_key', ''),
    );
    $form['advanced']['lingotek_community'] = array(
      '#type' => 'textfield',
      '#title' => t('Community ID'),
      '#description' => t('Community in which the project exists and translations will be made.'),
      '#default_value' => variable_get('lingotek_community', ''),
    );

  return $form;
}

/**
 * Form constructor for the administration form.
 *
 * @return array
 *   A FAPI form array.
 */
function lingotek_admin_form() {
  global $_lingotek_client, $_version;
  $site = variable_get('site_name', 'Drupal Site');

  // Dashboard Settings
  $form['dash'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dashboard Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'administrative_settings',
  );

  // If projects are available from Lingotek because the above login credentials worked, then display them in a drop list instead of a text box for the Id
  if ($_lingotek_client->canLogIn()) {
    $projects = (class_exists('LingotekApi')) ? LingotekApi::instance()->listProjects() : array();
    $id = variable_get('lingotek_project', '');

    if ($id == '' || !array_key_exists($id, $projects)) { //No project id set, project deleted, or community changed to one without that project.  Try to find the Drupal project
      $id = array_search($site, $projects);
      if ($id === False) { //Setup a default Drupal project
        $id = lingotek_add_project($site);
        $projects = (class_exists('LingotekApi')) ? LingotekApi::instance()->listProjects() : array();
      }
      else { //Assign to an existing Drupal project
        variable_set('lingotek_project', $id);
      }
    }

    $form['dash']['lingotek_project'] = array(
      '#type' => 'select',
      '#title' => t('Default Project ID'),
      '#options' => $projects,
      '#description' => t('The default Lingotek Project ID with which translations will be associated.'),
      '#default_value' => $id,
    );
  }
  else {
    $form['dash']['#description'] ='Save your Authentication Settings first.  Then you can select projects and vaults by name instead of ID.';
    $form['dash']['lingotek_project'] = array(
      '#type' => 'textfield',
      '#title' => t('Default Project ID'),
      '#description' => t('The default Lingotek Project ID with which translations will be associated.'),
      '#default_value' => variable_get('lingotek_project', ''),
    );
  }

  $warning = t('If you want to use Machine Translation, then don\'t use the public vault and you need to add the selected vault to the project within the Lingotek Dashboard.');

  //If vaults are available from Lingotek because the above login credentials worked, then display them in a drop list instead of a text box for the Id
  if ($_lingotek_client->canLogIn()) {
    $vaults = (class_exists('LingotekApi')) ? LingotekApi::instance()->listVaults() : array();
    $id = variable_get('lingotek_vault', '');

    if ($id == '') { //No vault id set. (Vaults are not community specific, so we don't have to test this like we did the project)  Try to find the Drupal vault
      $id = array_search($site, $vaults);
      if ($id === FALSE) { //Setup a default Drupal vault
        $id = lingotek_add_vault($site);
        $vaults = (class_exists('LingotekApi')) ? LingotekApi::instance()->listVaults() : array();
      }
      else { //Assign to an existing Drupal project
        variable_set('lingotek_vault', $id);
      }
    }
    lingotek_add_vault_to_project();

    $form['dash']['lingotek_vault'] = array(
      '#type' => 'select',
      '#title' => t('Vault'),
      '#options' => $vaults,
      '#description' => t('Vault where translations are saved. %warning', array('%warning' => $warning)),
      '#default_value' => $id,
    );
  }
  else {
    $form['dash']['lingotek_vault'] = array(
      '#type' => 'textfield',
      '#title' => t('Vault ID'),
      '#description' => t('Vault id under which the translations will exist. (1 is typically the public vault.) %warning%', array('%warning%' => $warning)),
      '#default_value' => variable_get('lingotek_vault', 1),
    );
  }

  // Options
  $options = array();
  $options[FALSE] = t("Disabled");
  $options[TRUE] = t("Enabled");

  // Default Settings
  $form['defaults'] = array(
    '#type' => 'fieldset',
    '#title' => t('Page Default Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'administrative_settings',
  );

  $form['defaults']['lingotek_sync'] = array(
    '#type' => 'radios',
    '#title' => t('Synchronization Method'),
    '#description' => t('Use this synchronization method as the default when creating new pages.'),
    '#options' => lingotek_get_sync_methods(),
    '#default_value' => variable_get('lingotek_sync', 0),
  );

  $form['defaults']['lingotek_use_source'] = array(
    '#type' => 'select',
    '#title' => t('Include source text in synchronization.'),
    '#description' => t('Should the synchronization include the source language when a translation isn\'t provided?'),
    '#options' => $options,
    '#default_value' => variable_get('lingotek_use_source', TRUE),
  );

  $engines = lingotek_get_machine_translation_engines();
  $form['defaults']['lingotek_mt_engine'] = array(
    '#type' => 'select',
    '#title' => t('Machine Translation Engine'),
    '#description' => t('Choose which translation engine should be used for the automatically pasted translations.  This setting will be used as the default when creating/editing a page.  If the user creating the page doesn\'t have permissions to choose the engine, this engine will be selected for them.'),
    '#options' => $engines,
    '#default_value' => variable_get('lingotek_mt_engine', FALSE),
  );
  $form['defaults']['lingotek_available_mt_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available Machine Translation Options'),
    '#description' => t('Choose which engines are available to the page creator.'),
    '#options' => $engines,
    '#default_value' => variable_get('lingotek_available_mt_options', array_keys($engines)),
  );

  //URL Alias Translation
  $form['defaults']['lingotek_url_alias_translation'] = array
  (
    '#type' => 'radios',
    '#title' => t('URL Alias Translation'),
    '#description' => t("Choose how you would like to translate the URL alias. The last option requires that you install both the Title and Pathauto modules, and define a path pattern, and check \"Enable Lingotek Translation\" for the Title field."),
    '#options' => lingotek_get_url_alias_translations(),
    '#default_value' => variable_get('lingotek_url_alias_translation', 0),
  );

  //Developer Settings
  $form['developer_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Developer Settings'),
    '#description' => t('Help debug any issues with the module and adds ways to manipulate the module\'s data directly.') . ' ' . l(t('(tools)'), 'admin/settings/lingotek/dev'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'administrative_settings',
  );

  $form['developer_settings']['lingotek_error_log'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Error Log'),
    '#description' => t('This prints errors and warnings to the web server\'s error logs in addition to adding them to watchdog.'),
    '#default_value' => variable_get('lingotek_error_log', FALSE),
  );

  $form['developer_settings']['lingotek_warning_log'] = array(
    '#type' => 'checkbox',
    '#title' => t('Supress Warnings'),
    '#description' => t('This prevents warnings from being sent to watchdog and the web server\'s error logs.'),
    '#default_value' => variable_get('lingotek_warning_log', FALSE),
  );

  $form['developer_settings']['lingotek_trace_log'] = array(
    '#type' => 'checkbox',
    '#title' => t('Supress Trace'),
    '#description' => t('This prevents debug messages from being sent to watchdog and the web server\'s error logs.'),
    '#default_value' => variable_get('lingotek_trace_log', TRUE),
  );

  $form['developer_settings']['lingotek_flush_cache'] = array(
    '#type' => 'checkbox',
    '#title' => t('Never cache'),
    '#description' => t('Skips caching so you can test easier.  This avoids frequent polling of fresh data from Lingotek.  Only those with Developer permissions will have caching disabled.'),
    '#default_value' => variable_get('lingotek_flush_cache', FALSE),
  );

  $form['developer_settings']['lingotek_api_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable API debugging'),
    '#description' => t('Logs the timing and request/response details of both successful and failing Lingotek API
      calls to the Drupal <a href="@watchdog_path">watchdog</a> in category "lingotek_debug".', array('@watchdog_path' => url('admin/reports/dblog'))),
    '#default_value' => variable_get('lingotek_api_debug', FALSE),
  );

  // Authentication Settings
  $form['auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authentication Settings'),
    '#description' => t('Lingotek Module Version 7.12.@revision', array('@revision' => $_version)),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'administrative_settings',
  );

  $form['auth']['lingotek_login_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Login ID'),
    '#description' => t('During flow of control, sometimes a Dashboard login id is not available.  In such instances, this login id will be used.  The only restriction is that the login id must exist in the Dashboard.'),
    '#default_value' => variable_get('lingotek_login_id', ''),
  );
  $key = variable_get('lingotek_login_key', '');
  if ($key == '') {
    drupal_set_message(t("Your Lingotek user does not have Community Admin rights.  The translation workbench will be unreachable for your translators unless you have a Login Key supplied from a Community Admin."), 'error');
    $form['auth']['lingotek_password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#description' => t('Password to use authenticating.'),
      '#attributes' => array('value' => variable_get('lingotek_password', '')),
    );
  }
  else {
    $form['auth']['lingotek_login_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Login Key'),
      '#description' => t('Key to use authenticating.  The key must be generated by the Lingotek system.  Your password was used once to fetch this key and subsequently deleted.'),
      '#default_value' => $key,
    );
  }
  $form['auth']['lingotek_community'] = array(
    '#type' => 'select',
    '#title' => t('Community'),
    '#description' => t('Community in which the project exists and translations will be made.'),
    '#options' => lingotek_get_communities(),
    '#default_value' => variable_get('lingotek_community', ''),
  );
  $form['auth']['lingotek_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Lingotek URL'),
    '#description' => t('URL pointing to the Lingotek instance to be used.'),
    '#default_value' => variable_get('lingotek_url', 'http://myaccount.lingotek.com'),
  );

  // Advanced XML configuration.
  $form['advanced-parsing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Content Parsing'),
    '#description' => t('Settings to support advanced parsing of translatable content.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced-parsing']['lingotek_advanced_xml_config1'] = array(
    '#type' => 'textarea',
    '#title' => t('Configuration Settings (Primary)'),
    '#description' => t('Paste in the contents of an advanced configuration file (.fprm). This will be used as the primary set of advanced settings when sending content to Lingotek.'),
    '#default_value' => variable_get('lingotek_advanced_xml_config1'),
  );

  $form['advanced-parsing']['lingotek_advanced_xml_config2'] = array(
    '#type' => 'textarea',
    '#title' => t('Configuration Settings (Secondary)'),
    '#description' => t('Paste in the contents of an advanced configuration file (.fprm). This will be used as the secondary set of advanced settings when sending content to Lingotek.'),
    '#default_value' => variable_get('lingotek_advanced_xml_config2'),
  );

  if (!variable_get('lingotek_advanced_parsing', FALSE)) {
    $form['advanced-parsing']['lingotek_advanced_parsing'] = array(
      '#type' => 'checkbox',
      '#title' => t('Upgrade to advanced content parsing.'),
      '#description' => t('This site is currently using Simple content parsing.
        Check this box to upgrade your site to use advanced content parsing for existing and future content. <strong>Warning:</strong> This will update all current Lingotek-associated content on the site, possibly modifying the state of in-progress translations.'),
    );

    $form['#submit'][] = 'lingotek_handle_advanced_xml_upgrade';
  }

  return $form;
}

/**
 * Administration form for the field language cleanup utility.
 *
 * @param array
 *   The current FAPI form state array.
 *
 * @return array
 *   A FAPI form array.
 */
function lingotek_form_field_language_utility($form_state) {
  $form = array();

  $form['description'] = array(
    '#markup' => '<p class="help">' . t('This tool processes all existing field data for translation-enabled fields on nodes,
      ensuring that if data was entered before enabling field translation on a field
      that the existing field data is copied over to the parent node\'s current language.') .
      '</p>',
  );

  $form['warning'] = array(
    '#markup' => '<p class="help">' . t('<strong>WARNING:</strong> This tool makes changes to your site\'s data. We strongly encourage you to back up your database before using this tool.') .
      '</p>',
  );

  $translatable_fields = lingotek_translatable_node_fields();

  $form['status'] = array(
    '#markup' => theme('item_list', array('items' => $translatable_fields, 'title' => t('Translation-enabled Fields'), 'type' => 'ul')),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Field Data'),
  );

  return $form;
}

/**
 * Submit handler for the lingotek_form_field_language_utility form.
 *
 * @param array $form
 *   The FAPI form array.
 * @param array $form_state
 *   The FAPI form state array.
 */
function lingotek_form_field_language_utility_submit($form, $form_state) {
  $query = new EntityFieldQuery();
  $entity_type = 'node';
  $nodes = $query->entityCondition('entity_type', $entity_type)
    ->propertyCondition('language', 'und', '<>')
    ->execute();

  $operations = array();
  foreach ($nodes[$entity_type] as $node) {
    $operations[] = array('lingotek_handle_batch_field_language_update',
      array($node->nid));
  }

  $batch = array(
    'title' => t('Lingotek Field Language Updater'),
    'operations' => $operations,
    'finished' => 'lingotek_field_language_update_finished',
    'file' => 'lingotek.admin.inc',
  );

  batch_set($batch);
}

/**
 * Custom form handler for upgrading a site from using Lingotek's simple to advanced XML parsing of content.
 */
function lingotek_handle_advanced_xml_upgrade($form, $form_state) {
  if ($form_state['values']['lingotek_advanced_parsing']) {
    $results = db_select('lingotek', 'l')->fields('l', array('nid'))->distinct()->execute();
    $operations = array();
    foreach ($results as $result) {
      $node = node_load($result->nid, NULL, TRUE);
      if (!empty($node->nid)) {
        $operations[] = array('lingotek_advanced_parsing_update_node', array($node->nid));
      }
    }

    $batch = array(
      'title' => t('Lingotek Advanced Parsing Updater'),
      'operations' => $operations,
      'file' => 'lingotek.admin.inc',
      'finished' => 'lingotek_advanced_parsing_update_finished',
    );

    // The admin form might not have finished processing yet, but if we're here, we're moving to advanced processing.
    // Ensure the appropriate variable is already set.
    variable_set('lingotek_advanced_parsing', TRUE);

    batch_set($batch);
  }
}
