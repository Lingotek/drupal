<?php

/**
 * @file lingotek.module
 * 
 * Implements Drupal-related hooks for the Lingotek Translation module.
 */

use Drupal\content_translation\ContentTranslationManagerInterface;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\lingotek\Lingotek;
use Drupal\lingotek\LingotekTranslatableEntity;
use Drupal\lingotek\LingotekLocale;
use Drupal\node\Form;

/**
 * Implements hook_permission().
 */
function lingotek_permission() {
  return array(
    'administer lingotek' => array(
      'title' => t('Administer Lingotek'),
      'description' => t('Access the administrative settings for the module.')
    ),
    'translation' => array(
      'title' => t('Translate'),
      'description' => t('Access to the translate content (e.g., the "Translations" tab will be available on nodes, comments will be translatable)')
    ),
    'manage projects' => array(
      'title' => t('Project Management'),
      'description' => t('Access the Lingotek tab on content types (Must also have permission to edit the content type in question).')
    ),
    'use lingotek developer tools' => array(
      'title' => t('Developer'),
      'description' => t('Access developer tools useful for detailed information and debugging')
    ),
  );
}

/**
 * Implements hook_toolbar().
 */
function lingotek_toolbar() {
  $items = array();
  $items['translation'] = array(
    '#type' => 'toolbar_item',
    '#attached' => array(
      'library' => array(
        'lingotek/lingotek.icons',
      ),
    ),
  );
  return $items;
}

/**
 * Implements hook_entity_create().
 */
function lingotek_entity_create(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
}

/**
 * Implements hook_entity_update().
 */
function lingotek_entity_update(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
}

/**
 * Implements hook_entity_delete().
 */
function lingotek_entity_delete(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
  $translation_service = \Drupal::service('lingotek.content_translation');

  // Delete the TMS document if it hasn't been disassociated
  if ($translation_service->getDocumentId($entity)) {
    $response = $translation_service->deleteDocument($entity);
  }
}

/**
 * Implements hook_form_alter().
 */
function lingotek_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityFormInterface) {
    $entity = $form_object->getEntity();

    /** @var ContentTranslationManagerInterface $content_translation_manager */
    $content_translation_manager = \Drupal::service('content_translation.manager');
    $config = \Drupal::config('lingotek.settings');
    // If content translation is not enabled and lingotek configured, don't add
    // the form element.
    if (!$content_translation_manager->isEnabled($entity->getEntityTypeId(), $entity->bundle()) ||
      !$config->get('translate.entity.' . $entity->getEntityTypeId() . '.' . $entity->bundle())) {
      return;
    }
    $container = \Drupal::getContainer();
    $L = $container->get('lingotek');
    $profiles = $L->get('profile');
    /** @var ContentEntityInterface $entity */
    $entity = $form_state->getFormObject()->getEntity();

    // ToDo: Remove profile functionality from LingotekTranslatableEntity.
    $lte = LingotekTranslatableEntity::load($L, $entity);
    $default_profile  = Lingotek::PROFILE_AUTOMATIC;
    $options = array();

    // Use the entity's profile if set, else use the content type's profile
    $entity_profile = $lte->getProfile();
    if ($entity_profile != NULL) {
      $default_profile = $entity_profile;
    }
    else {
      if ($entity->getEntityTypeId() == 'node') {
        if ($entity->getType() === 'article') {
          $default_profile = $L->get('translate.entity.node.article');
        }
        elseif ($entity->getType() === 'page') {
          $default_profile = $L->get('translate.entity.node.page');
        }
      }
    }
    foreach ($profiles as $profile) {
      $options[$profile['id']] = ucwords($profile['name']);
    }

    $form['lingotek_translation_management'] = array(
      '#type' => 'details',
      '#title' => t('Translation Management'),
      '#description' => t('The Lingotek Translation module was developed to help you translate your site. The module integrates the Lingotek translation management system directly into Drupal, so that your users can leverage the power of Lingotek\'s translation tools and services without ever having to leave the comfort of your Drupal environment.'),
      '#group' => 'advanced',
      '#weight' => 50,
    );

    $form['lingotek_translation_management']['lingotek_translation_profile'] = array(
      '#type' => 'select',
      '#title' => t('Translation Profile'),
      '#options' => $options,
      '#default_value' => $default_profile,
    );

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'lingotek_form_content_entity_form_submit';
      }
    }
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function lingotek_form_content_entity_form_submit ($form, FormStateInterface $form_state) {
  $form_values = $form_state->getValues();
  $container = \Drupal::getContainer();
  $L = $container->get('lingotek');
  /** @var \Drupal\lingotek\LingotekContentTranslationServiceInterface $translation_service */
  $translation_service = \Drupal::service('lingotek.content_translation');

  /** @var ContentEntityInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();

  // ToDo: Remove profile functionality from LingotekTranslatableEntity.
  // ToDo: validate.
  $entity->lingotek_profile->value = $form_values['lingotek_translation_profile'];
  $lte = LingotekTranslatableEntity::load($L, $entity);
  $lte->setProfile($form_values['lingotek_translation_profile']);
  $has_autoupload = $lte->hasAutomaticUpload();

  $source_status = $translation_service->getSourceStatus($entity);
  $entity_has_changed = $translation_service->hasEntityChanged($entity);
  
  if ($has_autoupload) {
    // New entity with auto-upload
    if ($source_status == NULL || $source_status == Lingotek::STATUS_UNTRACKED) {
      $document_id = $translation_service->uploadDocument($entity);
      drupal_set_message(t('<em>@title</em> sent to Lingotek successfully.', array('@title' => $entity->label())));
    }
    // Updated entity with auto-upload
    elseif ($entity_has_changed) {
      $translation_service->setSourceStatus($entity, Lingotek::STATUS_EDITED);
      $response = $translation_service->updateDocument($entity);
      $translation_service->setTargetStatuses($entity, Lingotek::STATUS_PENDING);
      drupal_set_message(t('<em>@title</em> was updated and sent to Lingotek successfully.', array('@title' => $entity->label())));
    }
  }
  // Updated entity with manual-upload
  elseif (!$has_autoupload){
    if($entity_has_changed) {
      $translation_service->setSourceStatus($entity, Lingotek::STATUS_EDITED);
      $translation_service->setTargetStatuses($entity, Lingotek::STATUS_EDITED);
    }
  }
}

/**
 * Iplements hook_contextual_links_view_alter
 */
function lingotek_contextual_links_view_alter(&$element, $items) {
  // TODO
}

/**
 * Implements hook_entity_type_alter().
 */
function lingotek_entity_type_alter(array &$entity_types) {
  // Provide defaults for lingotek translation info.
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as $entity_type) {
    if ($entity_type->isTranslatable()) {
      if (!$entity_type->hasHandlerClass('lingotek')) {
        $entity_type->setHandlerClass('lingotek', 'Drupal\lingotek\LingotekContentTranslationHandler');
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function lingotek_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Taken from content_translation.
  /** @var \Drupal\content_translation\ContentTranslationManagerInterface $manager */
  $manager = \Drupal::service('content_translation.manager');
  $entity_type_id = $entity_type->id();
  if ($manager->isSupported($entity_type_id)) {
    $definitions = \Drupal::entityManager()->getHandler($entity_type_id, 'lingotek')->getFieldDefinitions();
    $installed_storage_definitions = \Drupal::entityManager()->getLastInstalledFieldStorageDefinitions($entity_type_id);
    // We return metadata storage fields whenever content translation is enabled
    // or it was enabled before, so that we keep translation metadata around
    // when translation is disabled.
    // @todo Re-evaluate this approach and consider removing field storage
    //   definitions and the related field data if the entity type has no bundle
    //   enabled for translation, once base field purging is supported.
    //   See https://www.drupal.org/node/2282119.
    if ($manager->isEnabled($entity_type_id) || array_intersect_key($definitions, $installed_storage_definitions)) {
      return $definitions;
    }
  }
}
