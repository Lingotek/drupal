<?php

/**
 * @file lingotek.module
 * 
 * Implements Drupal-related hooks for the Lingotek Translation module.
 */

use Drupal\lingotek\Lingotek;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_permission().
 */
function lingotek_permission() {
  return array(
    'administer lingotek' => array(
      'title' => t('Administer Lingotek'),
      'description' => t('Access the administrative settings for the module.')
    ),
    'translation' => array(
      'title' => t('Translate'),
      'description' => t('Access to the translate content (e.g., the "Translations" tab will be available on nodes, comments will be translatable)')
    ),
    'manage projects' => array(
      'title' => t('Project Management'),
      'description' => t('Access the Lingotek tab on content types (Must also have permission to edit the content type in question).')
    ),
    'use lingotek developer tools' => array(
      'title' => t('Developer'),
      'description' => t('Access developer tools useful for detailed information and debugging')
    ),
  );
}

/**
 * Implements hook_toolbar().
 */
function lingotek_toolbar() {
  $items = array();

  $items['translation'] = array(
    '#type' => 'toolbar_item',
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'lingotek') . '/css/lingotek.icons.css',
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_entity_create().
 */
function lingotek_entity_create(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
}

/**
 * Implements hook_entity_update().
 */
function lingotek_entity_update(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
}

/**
 * Implements hook_entity_delete().
 */
function lingotek_entity_delete(EntityInterface $entity) {
  // Only act on content entities.
  if (!($entity instanceof ContentEntityInterface)) {
    return;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function lingotek_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // TODO: add profile info and etc. to the node form.
}


function lingotek_operation_content_upload($entity_type, $entity_id) {
  // Prepare the entity's translatable content for upload.
  $container = \Drupal::getContainer();
  $entity = entity_load($entity_type, $entity_id);
  $te = LingotekTranslatableEntity::load($container, $entity);
  $source_data = json_encode($te->getSourceData());

  $L = $container->get('lingotek');
  $doc_id = $L->uploadDocument($entity->bundle() . ' (' . $entity->getEntityTypeId() . '): ' . $entity->label(), $source_data, 'en_US');
  if ($doc_id) {
    $te->setDocId($doc_id);
    $te->setSourceStatus(Lingotek::STATUS_EDITED);
  }
}

function lingotek_operation_content_upload_finished() {
  // Nothing to do here for now.
}
