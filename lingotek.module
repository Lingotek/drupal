<?php
/**
 * @file
 * Module core functionality.
 */

/**
 * Identifies a content type which has Lingotek translation enabled.
 */
define('LINGOTEK_ENABLED', 5);

include_once('lingotek.session.inc');
include_once('lingotek.reference.inc');
include_once('lingotek.util.inc');
include_once('lingotek.api.inc');
include_once('lingotek.mt.inc');

/**
 * Implements hook_menu().
 */
function lingotek_menu() {
  $items = array();

  $items['admin/settings/lingotek'] = array(
    'title' => 'Lingotek',
    'access arguments' => array('administration'),
    'description' => 'Community Translation Settings',
    'file' => 'lingotek.admin.inc',
    'page callback' => 'lingotek_settings_page',
  );

  $items['node/%node/lingotek_pm'] = array(
    'title' => 'Lingotek',
    'access arguments' => array(1, 'pm'),
    'access callback' => 'lingotek_access',
    'file' => 'lingotek.page.inc',
    'page arguments' => array(1),
    'page callback' => 'lingotek_pm',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['lingotek/update'] = array(
    'access arguments' => array('pm'),
    'file' => 'lingotek.page.inc',
    'page callback' => 'lingotek_update',
    'type' => MENU_CALLBACK,
  );

  $items['lingotek/mt_all'] = array(
    'access arguments' => array('administration'),
    'file' => 'lingotek.pages.inc',
    'page callback' => 'lingotek_mt_all',
    'type' => MENU_CALLBACK,
  );

  $items['lingotek/segment'] = array(
    'access arguments' => array('mt'),
    'file' => 'lingotek.mt.inc',
    'page callback' => 'lingotek_mt_save_segment',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/lingotek/dev'] = array(
    'title' => 'Lingotek Developer Tools',
    'access arguments' => array('dev'),
    'description' => 'Developer Tools',
    'file' => 'lingotek.dev.inc',
    'page callback' => 'lingotek_dev_page',
  );
  
  $items['admin/config/regional/field-data-cleanup'] = array(
    'title' => 'Lingotek Field Data Cleanup Utility',
    'description' => 'Updates language settings for existing field data.',
    'access arguments' => array('access lingotek utilities'),
    'file' => 'lingotek.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lingotek_form_field_language_utility'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/lingotek_dev'] = array(
    'title' => 'Lingotek Developer Tools',
    'access arguments' => array('dev'),
    'description' => 'Developer Tools',
    'file' => 'lingotek.dev.inc',
    'page callback' => 'lingotek_dev_page',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function lingotek_permission() {
  return array(
    'access lingotek utilities' => array(
      'title' => t('Access Lingotek Utilities'),
      'description' => t('Access admin-only utility pages.')
    ),
    'administration' => array('title' => 'Administration Menu', 'description' => t('Access the administrative page for the module.')),
    'pm' => array('title' => 'Project Management', 'description' => t('Access the Lingotek tab on content types (Must also have permission to edit the content type in question).')),
    'translation' => array('title' => 'Translate', 'description' => t('Allow access to the workbench for translation (first) phases')),
    'review' => array('title' => 'Review', 'description' => t('Allow access to the workbench for review (following) phases.')),
    'phase_template' => array('title' => 'Phase Template (Workflow)', 'description' => t('Allow node-level setting of the phase template on node creation.  Can only be set once per node.')),
    'use_source' => array('title' => 'Paste Source', 'description' => t('Allow node-level setting of showing the source when no translation is available yet')),
    'sync_method' => array('title' => 'Synchronization Method', 'description' => t('Allow node-level setting of setting the synchronization method')),
    'url_alias_translation' => array('title' => 'URL Alias Translation', 'description' => t('Allow node-level setting of setting the URL alias translation')),    
    'mt' => array('title' => 'Machine Translation', 'description' => t('Allow node-level setting of machine translation')),
    'dev' => array('title' => 'Developer', 'description' => t('Access useful debugging features')),
  );
}

/*
 * hook_form_BASE_FORM_ID_alter
 */
function lingotek_form_node_form_alter(&$form, $form_state, $form_id) {
  global $_lingotek_locale;

  if (!lingotek_supported_type($form['#node']->type)) {
    return;
  }

  drupal_add_css(drupal_get_path('module', 'lingotek') . '/style/form.css');

  $options = array();
  $options[TRUE] = t('Enabled');
  $options[FALSE] = t('Disabled');

  //Vertical Tab
  $form['lingotek'] = array
  (
    '#title' => t('Lingotek Translation Settings'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#attributes' => array('id' => array('lingotek_fieldset')),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'lingotek') . '/js/lingotek.form.js'),
    ),
  );

  $form['lingotek']['note'] = array
  (
    '#type' => 'item',
    '#title' => t('Lingotek Translation Settings'),
    '#description' => t('Please select a language for Lingotek to use as the source language.  The source language cannot be language neutral.'),
  );
  $form['lingotek']['content'] = array
  (
    '#type' => 'container',
  );
  $form['lingotek']['content']['note'] = array
  (
    '#type' => 'item',
    '#title' => t('Lingotek Translation Settings'),
    '#description' => t("The Lingotek Collaborative Translation module was developed by Lingotek to aid administrators of Drupal-created websites in getting their web content translated. The module integrates Lingotek's Collaborative Translation Platform directly into Drupal, so that your users can leverage the power of Lingotek's translation tools without ever having to leave the comfort of their Drupal environment."),
  );

  $node = lingotek_empty_node();
  $document_id = FALSE;
  if (isset($form['nid']['#value'])) {
    $nid = $form['nid']['#value'];
    $node = node_load($nid);
    $document_id = lingotek_lingonode($nid, 'document_id_' . $node->language);
  }

  //Document already added?  Then don't show the phase template settings
  if (!$document_id) {
    //Phase Template
    $form['lingotek']['content']['phaseTemplate'] = array(
      '#type' => 'select',
      '#title' => t('Phase Template (Workflow)'),
      '#default_value' => variable_get('lingotek_phase_template', 2),
      '#options' => lingotek_get_phase_templates(),
      '#access' => user_access('phase_template'),
      '#description' => t("Choose the workflow you want translators to go through in order to finish translation of the page.  Workflows can be customized from Lingotek's dashboard by the drupal administrator. Community phases allow collaborative effort in the form of voting and approving others work.  This can only be set once per node."),
    );
  }

  //Sync Setting
  $form['lingotek']['content']['syncMethod'] = array
  (
    '#type' => 'radios',
    '#title' => t('Synchronization Method'),
    '#default_value' => lingotek_variable_get(lingotek_lingonode($node->nid, 'sync_method'), 'lingotek_sync', 0),
    '#options' => lingotek_get_sync_methods(),
    '#access' => user_access('sync_method'),
    '#description' => t("How do you want content on this site to be kept in sync with Lingotek?  Do you want translations to be current and the latest (Always), or only downloaded from Lingotek when done (100%)?  \"Never\" requires you to manually synchronize on the page's Lingotek tab by calling update."),
  );

  //Paste Source Setting
  $form['lingotek']['content']['useSource'] = array
  (
    '#type' => 'select',
    '#title' => t('Include source text in synchronization.'),
    '#default_value' => lingotek_variable_get(lingotek_lingonode($node->nid, 'use_source'), 'lingotek_use_source', TRUE),
    '#options' => $options,
    '#access' => user_access('use_source'),
    '#description' => t("This determines if the target languages will fill untranslated text with the source language or simply leave untranslated text out of the document."),
  );

  //MT Settings
  if (user_access('mt')) {
    $available_engines = lingotek_get_machine_translation_engines();
    $enabled_engines = variable_get('lingotek_available_mt_options', array_keys($available_engines));
    $engines = array();
    foreach ($enabled_engines as $engine) {
      $engines[$engine] = $available_engines[$engine];
    }

    $form['lingotek']['content']['mtEngine'] = array(
      '#type' => 'select',
      '#title' => t('Machine Translation Engine'),
      '#default_value' => lingotek_variable_get(lingotek_lingonode($node->nid, 'mt_engine'), 'lingotek_mt_engine', FALSE), //Only run MT when specified
      '#options' => $engines,
      '#description' => t("Choose an engine to automatically translate the content with. Warning: This will automatically synchronize the content as a manual update would from the Lingotek tab for the page."),
    );

    $languages = array();
    $checked = array();
    foreach (language_list() as $language) {
      if ($language->enabled && isset($_lingotek_locale[$language->language])) {
        $languages[$language->language] = $language->native . " (" . $language->name . ")";
        array_push($checked, $language->language);
      }
    }
    $saved = lingotek_lingonode($node->nid, 'mt_targets');
    if ($saved !== False) {
      $checked = explode(",", $saved);
    }

    $form['lingotek']['content']['mtTargets'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Apply Machine Translation to the following languages'),
      '#options' => $languages,
      '#default_value' => $checked,
      '#description' => t("Choose which languages should be machine translated with the above engine."),
    );
  }

  //URL Alias Translation
  if (user_access('url_alias_translation')) {
    $form['lingotek']['content']['urlAliasTranslation'] = array
    (
      '#type' => 'radios',
      '#title' => t('URL Alias Translation'),
      '#default_value' => lingotek_variable_get(lingotek_lingonode($node->nid, 'url_alias_translation'), 'lingotek_url_alias_translation', 0),
      '#options' => lingotek_get_url_alias_translations(),
      '#description' => t("Choose how you would like to translate the URL alias. The last option requires that you install both the Title and Pathauto modules, and define a path pattern, and check \"Enable Lingotek Translation\" for the Title field."),
    );
  }
  
  $form['lingotek']['developer'] = array(
    '#type' => 'fieldset',
    '#title' => t('Developer Settings (Advanced)'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'developer_settings',
    '#access' => user_access('dev'),
  );
  if ($document_id === False) {
    $document_id = '';
  }
  $form['lingotek']['developer']['document_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Document Id'),
    '#description' => t("Read/Overwrite the document ID associated with the document.  This can break the translation process but can also be used to help figure out if something is wrong."),
    '#default_value' => $document_id,
  );

  $values = t('None');
  if (isset($nid)) {
    $values = json_encode(lingotek_lingonode($nid));
  }
  $form['lingotek']['developer']['current_lingonode'] = array(
    '#type' => 'item',
    '#title' => t('Node Variables'),
    '#description' => $values,
  );

}

/*
 * hook_node_view
 */
function lingotek_node_view($node, $view_mode) {
  global $language, $first_load;

  if ($view_mode == 'full' && lingotek_supported_type($node->type) && lingotek_supported_language($node->language)) {
    drupal_add_css(drupal_get_path('module', 'lingotek') . '/style/base.css');
    lingotek_trace('lingotek_node_view');
    lingotek_node_sync($node);

    //Node added while module disabled or before the module was installed?
    lingotek_node_init_default($node);

    if ($language->language != $node->language) {
      $link = lingotek_get_workbench_url($node, $language->language, t("Help make it better."));
      if ($link != "") {
        $message = t('The translation of %title is still being worked on.', array('%title' => $node->title)) . " ";
        $message .= $link . "&nbsp;";
        if (lingotek_access($node, 'pm')) {
          $message .= '<span style="font-size: 80%">[' . l(t('progress'), 'node/' . $node->nid . '/lingotek_pm', array('html' => true)) . ']</span>';
        }
        drupal_set_message($message, 'warning', FALSE);
      }
    }
  }
}

function lingotek_node_presave($node) {
  //Make sure the title isn't overwritten with the translation when using the title module:
  if (module_exists('title') && array_key_exists('title_field', $node)) {
    $node->title = $node->title_field[$node->language][0]['value'];
  }
}

/*
 * hook_node_insert
 */
function lingotek_node_insert($node) {
  lingotek_node_update($node);
}

/*
 * hook_node_update
 */
function lingotek_node_update($node) {
  if (!lingotek_supported_type($node->type) || !lingotek_supported_language($node->language)) {
    return;
  }

  #Overwrite Doc Id:
  if (user_access('dev') && isset($node->document_id) && is_numeric($node->document_id)) {
    lingotek_lingonode($node->nid, 'document_id_' . $node->language, $node->document_id);
  }
  if (isset($node->mtEngine)) {
    lingotek_lingonode($node->nid, 'mt_engine', $node->mtEngine);
  }
  if (user_access('url_alias_translation') && isset($node->urlAliasTranslation)) {
    lingotek_lingonode($node->nid, 'url_alias_translation', $node->urlAliasTranslation);
  }

  if (isset($node->mtTargets)) {
    $node->mtTargets = array_filter($node->mtTargets, "lingotek_unselected");
    lingotek_lingonode($node->nid, 'mt_targets', implode(",", $node->mtTargets));
  }
  //If document never added, FIRST RUN ONLY
  if (lingotek_lingonode($node->nid, 'document_id_' . $node->language) === FALSE) {
    lingotek_trace('lingotek_node_update FIRST RUN ONLY', array("nid" => $node->nid, "language" => $node->language));
    $phase_template = variable_get('lingotek_phase_template', 2);
    //If user defines the phase template
    if (user_access('phase_template') && isset($node->phaseTemplate)) {
      $phase_template = $node->phaseTemplate;
    }
    lingotek_add_document($node);
    lingotek_lingonode($node->nid, 'phase_template_id', $phase_template);

    //Run MT for the first time
    if (user_access('mt')) {
      if (isset($node->mtEngine) && $node->mtEngine) {
        lingotek_mt($node, $node->mtTargets, $node->mtEngine);
      }
    }
    else {
      $checked = array();
      foreach (language_list() as $language) {
        if ($language->enabled) {
          array_push($checked, $language->language);
        }
      }
      lingotek_mt($node, $checked, variable_get('lingotek_mt_engine', FALSE));
    }
  }
  else {
    //Keep source document up to date
    lingotek_update_document($node);

    //Run MT
    if (user_access('mt') && isset($node->mtEngine) && $node->mtEngine) {
      lingotek_mt($node, $node->mtTargets, $node->mtEngine);
    }
  }

  if (user_access('sync_method') && isset($node->syncMethod)) {
    lingotek_lingonode($node->nid, 'sync_method', $node->syncMethod);
  }
  if (user_access('use_source') && isset($node->useSource)) {
    lingotek_lingonode($node->nid, 'use_source', $node->useSource);
  }

  #Add any missing languages and their phase templates
  lingotek_add_missing_targets($node);
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enable Lingotek translation on a node type
 */
function lingotek_form_node_type_form_alter(&$form, &$form_state) {
  $type = $form['#node_type']->type;
  $form['workflow']['language_content_type']['#options'][LINGOTEK_ENABLED] = t('Enabled, with Lingotek translation');
  $form['workflow']['language_content_type']['#description'] .= ' ' . t('If Lingotek translation is enabled, then it will be possible to use Lingotek\'s collaborative workbench to translate content.');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enable Lingotek translation on a field type
 */
function lingotek_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (!lingotek_supported_field_type($form['#field']['type'])) {
    return $form;
  }
  $default = 0;
  if (array_key_exists('lingotek_translatable',  $form['#field'])) {
    $default = $form['#field']['lingotek_translatable'];
  }

  $form['field']['lingotek_translatable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Lingotek Translation'),
    '#description' => t('This allows fields to be translatable using the Lingotek Collaborative Translations Platform.'),
    '#default_value' => $default,
  );
  array_push($form['#submit'], 'lingotek_update_field');
  return $form;
}

function lingotek_update_field($form, $form_state) {
  $field = $form['#field']['field_name'];
  db_update('field_config')->fields(array('translatable' => $form['field']['lingotek_translatable']['#value']))->condition('field_name', $field)->execute();
}

/*
 * hook_preprocess_page
 * flush the queue for machine translation on every page load
 */
function lingotek_preprocess_page(&$page, $hook) {
  //Process MT queue once per page load
  lingotek_dequeue();
}

/*
 * hook_help
 */
function lingotek_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lingotek':
      return t('Please see our DevZone:') . ' ' . l(t('Drupal Integration'), 'http://lingotek.com/support/devzone/drupal-integration');
  }
}

/**
 * Batch API processor for field data language updates.
 */
function lingotek_handle_batch_field_language_update($nid, &$context) {
  $process_node = node_load($nid);
  
  if ($process_node->nid) {
    lingotek_update_language_field_data($process_node->nid);
    $context['message'] = t('Updating field data for node: @node_title', array('@node_title' => $process_node->title));
  }
  
  $context['finished'] = 1;
}

/**
 * Ensures correct language-specific field data for the specified item.
 *
 * @param int $nid
 *   The node ID of the item to be updated.
 *
 * @return bool
 *   TRUE if the specified node's field data was updated. FALSE if no changes were made.
 */
function lingotek_update_language_field_data($nid) {
  $edited = FALSE;
  
  $node = node_load($nid, NULL, TRUE);
  if ($node->nid) {
    if ($node->language != 'und') {
      $translatable_fields = lingotek_translatable_node_fields();
      foreach ($translatable_fields as $field_name) {
        if (!empty($node->{$field_name}['und']) && empty($node->{$field_name}[$node->language])) {
          $node->{$field_name}[$node->language] = $node->{$field_name}['und'];
          $edited = TRUE;
        }
      } 
    }

    if ($edited) {
      node_save($node);
    }
  }
  else {
    watchdog('lingotek', 'Attempted to update field data for a non-existent node: @node_id',
      array('@node_id' => $node_id), WATCHDOG_ERROR);
  }
  
  return $edited;
}

/**
 * Gets a list of fields with translation enabled.
 *
 * @return array
 *   An array of the machine names for translatable fields in the system.
 */
function lingotek_translatable_node_fields() {
  $fields = field_info_fields();
  $translatable_fields = array();
  foreach ($fields as $field_id => $field) {
    foreach ($field['bundles'] as $type => $instance) {
      if (field_is_translatable($type, $field)) {
        $translatable_fields[] = $field['field_name'];
      }
    }
  }
  
  return $translatable_fields;
}

/**
 * "Finished" callback for language update batch operations.
 */
function lingotek_field_language_update_finished($success, $results, $operations) {
  drupal_set_message('Updated field data for nodes.') ;
}
